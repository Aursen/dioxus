#![allow(unused_parens)]

// https://github.com/mdn/content/tree/main/files/en-us/web/html/global_attributes

use dioxus_core::exports::bumpalo::collections::Vec as BumpVec;
use dioxus_core::{prelude::*, Attribute};
use std::borrow::Cow;
use std::{any::Any, ops::Deref, ptr::addr_of};

use super::NodeBuilder;

macro_rules! attribute {
    ( $($(#[$attr_meta:meta])* $name:ident$tye:tt => $text:literal; )* ) => {
        $(
            $(#[$attr_meta])*
            fn $name(self, _f: $tye) -> Self {
                // self.inner_mut().push_attribute(todo!());
                self
            }
        )*
    };
}

macro_rules! style_attribute {
    ( $($(#[$attr_meta:meta])* $name:ident$tye:tt => $text:literal; )* ) => {
        $(
            $(#[$attr_meta])*
            fn $name(self, _f: $tye) -> Self {
                // self.inner_mut().push_attribute(todo!());
                self
            }
        )*
    };
}

macro_rules! events {
    (
        $(
            $( #[$attr:meta] )*
            $wrapper:ident($data:ident): [
                $(
                    $( #[$method_attr:meta] )*
                    $name:ident
                )*
            ];
        )*
    ) => {
        $(
            $(
                $(#[$method_attr])*
                fn $name(self, _f: impl FnMut(()) + 'a) -> Self {
                    // self.inner_mut().push_attribute(todo!());
                    self
                }
            )*
        )*
    };
}

pub trait HtmlElement<'a>: Sized {
    fn inner_mut(&mut self) -> &mut NodeBuilder<'a>;

    fn inner(self) -> NodeBuilder<'a>;

    fn children<const NUM: usize>(self, children: [Element<'a>; NUM]) -> Self {
        todo!()
    }

    fn build(self) -> Element<'a> {
        self.inner().build()
    }

    attribute! {
        /// The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element.
        /// The attribute value must consist of a single printable character (which includes accented and other characters
        /// that can be generated by the keyboard).
        ///
        /// ## Example
        /// ```html
        /// <p>If you need to relax, press the
        /// <strong><u>S</u></strong>tress reliever!</p>
        ///
        /// <button accesskey="s">Stress reliever</button>
        /// ```
        ///
        /// ## Accessibility concerns
        ///
        /// In addition to poor browser support, there are numerous concerns with the `accesskey` attribute:
        ///
        /// - An `accesskey` value can conflict with a system or browser keyboard shortcut, or assistive technology functionality. What may work for one combination of operating system, assistive technology, and browser may not work with other combinations.
        /// - Certain `accesskey` values may not be present on certain keyboards, especially when internationalization is a concern. So adapting to specific languages could cause further problems.
        /// - `accesskey` values that rely on numbers may be confusing to individuals experiencing cognitive concerns, where the number doesn't have a logical association with the functionality it triggers.
        /// - Informing the user that `accesskey`s are present, so that they are aware of the functionality. If the system lacks a method of notifying the user about this feature, the user might accidentally activate `accesskey`s.
        ///
        /// Because of these issues, it is generally advised not to use `accesskey`s for most general-purpose websites and web apps.
        ///
        /// - [WebAIM: Keyboard Accessibility - Accesskey](https://webaim.org/techniques/keyboard/accesskey#spec)
        access_key(impl Into<Cow<'a, str>>) => "accesskey";

        /// The HTML class attribute is used to specify a class for an HTML element.
        ///
        /// ## Details
        /// Multiple HTML elements can share the same class.
        ///
        /// The class global attribute is a space-separated list of the case-sensitive classes of the element.
        /// Classes allow CSS and Javascript to select and access specific elements via the class selectors or
        /// functions like the DOM method document.getElementsByClassName.
        ///
        /// ## Example
        ///
        /// ### HTML:
        /// ```html
        /// <p class="note editorial">Above point sounds a bit obvious. Remove/rewrite?</p>
        /// ```
        ///
        /// ### CSS:
        /// ```css
        /// .note {
        ///     font-style: italic;
        ///     font-weight: bold;
        /// }
        ///
        /// .editorial {
        ///     background: rgb(255, 0, 0, .25);
        ///     padding: 10px;
        /// }
        /// ```
        class(impl Into<Cow<'a, str>>) => "class";

        /// contenteditable
        content_editable(bool) => "contenteditable";

        /// data
        data(impl Into<Cow<'a, str>>) => "data";

        /// dir
        dir(impl Into<Cow<'a, str>>) => "dir";

        /// draggable
        draggable(bool) => "draggable";

        /// hidden
        hidden(bool) => "hidden";

        /// id
        id(impl Into<Cow<'a, str>>) => "id";

        /// lang
        lang(impl Into<Cow<'a, str>>) => "lang";

        /// spellcheck
        spellcheck(bool) => "spellcheck";

        /// style
        style(impl Into<Cow<'a, str>>) => "style";

        /// tabindex
        tab_index(usize) => "tabindex";

        /// title
        title(impl Into<Cow<'a, str>>) => "title";

        /// translate
        translate(impl Into<Cow<'a, str>>) => "translate";

        /// role
        role(impl Into<Cow<'a, str>>) => "role";

        text(impl Into<Cow<'a, str>>) => "text";

        /// dangerous_inner_html is Dioxus's replacement for using innerHTML in the browser DOM. In general, setting
        /// HTML from code is risky because it’s easy to inadvertently expose your users to a cross-site scripting (XSS)
        /// attack. So, you can set HTML directly from Dioxus, but you have to type out dangerous_inner_html to remind
        /// yourself that it’s dangerous
        dangerous_inner_html(impl Into<Cow<'a, str>>) => "dangerous_inner_html";
    }

    style_attribute! {
        /// Specifies the alignment of flexible container's items within the flex container.
        align_content(impl Into<Cow<'a, str>>) => "align-content";

        /// Specifies the default alignment for items within the flex container.
        align_items(impl Into<Cow<'a, str>>) => "align-items";

        /// Specifies the alignment for selected items within the flex container.
        align_self(impl Into<Cow<'a, str>>) => "align-self";

        /// Specifies the keyframe_based animations.
        animation(impl Into<Cow<'a, str>>) => "animation";

        /// Specifies when the animation will start.
        animation_delay(impl Into<Cow<'a, str>>) => "animation-delay";

        /// Specifies whether the animation should play in reverse on alternate cycles or not.
        animation_direction(impl Into<Cow<'a, str>>) => "animation-direction";

        /// Specifies the number of seconds or milliseconds an animation should take to complete one cycle
        animation_duration(impl Into<Cow<'a, str>>) => "animation-duration";

        /// Specifies how a CSS animation should apply styles to its target before and after it is executing
        animation_fill_mode(impl Into<Cow<'a, str>>) => "animation-fill-mode";

        /// Specifies the number of times an animation cycle should be played before stopping.
        animation_iteration_count(impl Into<Cow<'a, str>>) => "animation-iteration-count";

        /// Specifies the name of @keyframes defined animations that should be applied to the selected element
        animation_name(impl Into<Cow<'a, str>>) => "animation-name";

        /// Specifies whether the animation is running or paused.
        animation_play_state(impl Into<Cow<'a, str>>) => "animation-play-state";

        /// Specifies how a CSS animation should progress over the duration of each cycle.
        animation_timing_function(impl Into<Cow<'a, str>>) => "animation-timing-function";

        /// Specifies whether or not the "back" side of a transformed element is visible when facing the user.
        backface_visibility(impl Into<Cow<'a, str>>) => "backface-visibility";

        /// Defines a variety of background properties within one declaration.
        background(impl Into<Cow<'a, str>>) => "background";

        /// Specify whether the background image is fixed in the viewport or scrolls.
        background_attachment(impl Into<Cow<'a, str>>) => "background-attachment";

        /// Specifies the painting area of the background.
        background_clip(impl Into<Cow<'a, str>>) => "background-clip";

        /// Defines an element's background color.
        background_color(impl Into<Cow<'a, str>>) => "background-color";

        /// Defines an element's background image.
        background_image(impl Into<Cow<'a, str>>) => "background-image";

        /// Specifies the positioning area of the background images.
        background_origin(impl Into<Cow<'a, str>>) => "background-origin";

        /// Defines the origin of a background image.
        background_position(impl Into<Cow<'a, str>>) => "background-position";

        /// Specify whether/how the background image is tiled.
        background_repeat(impl Into<Cow<'a, str>>) => "background-repeat";

        /// Specifies the size of the background images.
        background_size(impl Into<Cow<'a, str>>) => "background-size";

        /// Sets the width, style, and color for all four sides of an element's border.
        border(impl Into<Cow<'a, str>>) => "border";

        /// Sets the width, style, and color of the bottom border of an element.
        border_bottom(impl Into<Cow<'a, str>>) => "border-bottom";

        /// Sets the color of the bottom border of an element.
        border_bottom_color(impl Into<Cow<'a, str>>) => "border-bottom-color";

        /// Defines the shape of the bottom_left border corner of an element.
        border_bottom_left_radius(impl Into<Cow<'a, str>>) => "border-bottom-left-radius";

        /// Defines the shape of the bottom_right border corner of an element.
        border_bottom_right_radius(impl Into<Cow<'a, str>>) => "border-bottom-right-radius";

        /// Sets the style of the bottom border of an element.
        border_bottom_style(impl Into<Cow<'a, str>>) => "border-bottom-style";

        /// Sets the width of the bottom border of an element.
        border_bottom_width(impl Into<Cow<'a, str>>) => "border-bottom-width";

        /// Specifies whether table cell borders are connected or separated.
        border_collapse(impl Into<Cow<'a, str>>) => "border-collapse";

        /// Sets the color of the border on all the four sides of an element.
        border_color(impl Into<Cow<'a, str>>) => "border-color";

        /// Specifies how an image is to be used in place of the border styles.
        border_image(impl Into<Cow<'a, str>>) => "border-image";

        /// Specifies the amount by which the border image area extends beyond the border box.
        border_image_outset(impl Into<Cow<'a, str>>) => "border-image-outset";

        /// Specifies whether the image_border should be repeated, rounded or stretched.
        border_image_repeat(impl Into<Cow<'a, str>>) => "border-image-repeat";

        /// Specifies the inward offsets of the image_border.
        border_image_slice(impl Into<Cow<'a, str>>) => "border-image-slice";

        /// Specifies the location of the image to be used as a border.
        border_image_source(impl Into<Cow<'a, str>>) => "border-image-source";

        /// Specifies the width of the image_border.
        border_image_width(impl Into<Cow<'a, str>>) => "border-image-width";

        /// Sets the width, style, and color of the left border of an element.
        border_left(impl Into<Cow<'a, str>>) => "border-left";

        /// Sets the color of the left border of an element.
        border_left_color(impl Into<Cow<'a, str>>) => "border-left-color";

        /// Sets the style of the left border of an element.
        border_left_style(impl Into<Cow<'a, str>>) => "border-left-style";

        /// Sets the width of the left border of an element.
        border_left_width(impl Into<Cow<'a, str>>) => "border-left-width";

        /// Defines the shape of the border corners of an element.
        border_radius(impl Into<Cow<'a, str>>) => "border-radius";

        /// Sets the width, style, and color of the right border of an element.
        border_right(impl Into<Cow<'a, str>>) => "border-right";

        /// Sets the color of the right border of an element.
        border_right_color(impl Into<Cow<'a, str>>) => "border-right-color";

        /// Sets the style of the right border of an element.
        border_right_style(impl Into<Cow<'a, str>>) => "border-right-style";

        /// Sets the width of the right border of an element.
        border_right_width(impl Into<Cow<'a, str>>) => "border-right-width";

        /// Sets the spacing between the borders of adjacent table cells.
        border_spacing(impl Into<Cow<'a, str>>) => "border-spacing";

        /// Sets the style of the border on all the four sides of an element.
        border_style(impl Into<Cow<'a, str>>) => "border-style";

        /// Sets the width, style, and color of the top border of an element.
        border_top(impl Into<Cow<'a, str>>) => "border-top";

        /// Sets the color of the top border of an element.
        border_top_color(impl Into<Cow<'a, str>>) => "border-top-color";

        /// Defines the shape of the top_left border corner of an element.
        border_top_left_radius(impl Into<Cow<'a, str>>) => "border-top-left-radius";

        /// Defines the shape of the top_right border corner of an element.
        border_top_right_radius(impl Into<Cow<'a, str>>) => "border-top-right-radius";

        /// Sets the style of the top border of an element.
        border_top_style(impl Into<Cow<'a, str>>) => "border-top-style";

        /// Sets the width of the top border of an element.
        border_top_width(impl Into<Cow<'a, str>>) => "border-top-width";

        /// Sets the width of the border on all the four sides of an element.
        border_width(impl Into<Cow<'a, str>>) => "border-width";

        /// Specify the location of the bottom edge of the positioned element.
        bottom(impl Into<Cow<'a, str>>) => "bottom";

        /// Applies one or more drop_shadows to the element's box.
        box_shadow(impl Into<Cow<'a, str>>) => "box-shadow";

        /// Alter the default CSS box model.
        box_sizing(impl Into<Cow<'a, str>>) => "box-sizing";

        /// Specify the position of table's caption.
        caption_side(impl Into<Cow<'a, str>>) => "caption-side";

        /// Specifies the placement of an element in relation to floating elements.
        clear(impl Into<Cow<'a, str>>) => "clear";

        /// Defines the clipping region.
        clip(impl Into<Cow<'a, str>>) => "clip";

        /// Specify the color of the text of an element.
        color(impl Into<Cow<'a, str>>) => "color";

        /// Specifies the number of columns in a multi_column element.
        column_count(impl Into<Cow<'a, str>>) => "column-count";

        /// Specifies how columns will be filled.
        column_fill(impl Into<Cow<'a, str>>) => "column-fill";

        /// Specifies the gap between the columns in a multi_column element.
        column_gap(impl Into<Cow<'a, str>>) => "column-gap";

        /// Specifies a straight line, or "rule", to be drawn between each column in a multi_column element.
        column_rule(impl Into<Cow<'a, str>>) => "column-rule";

        /// Specifies the color of the rules drawn between columns in a multi_column layout.
        column_rule_color(impl Into<Cow<'a, str>>) => "column-rule-color";

        /// Specifies the style of the rule drawn between the columns in a multi_column layout.
        column_rule_style(impl Into<Cow<'a, str>>) => "column-rule-style";

        /// Specifies the width of the rule drawn between the columns in a multi_column layout.
        column_rule_width(impl Into<Cow<'a, str>>) => "column-rule-width";

        /// Specifies how many columns an element spans across in a multi_column layout.
        column_span(impl Into<Cow<'a, str>>) => "column-span";

        /// Specifies the optimal width of the columns in a multi_column element.
        column_width(impl Into<Cow<'a, str>>) => "column-width";

        /// A shorthand property for setting column_width and column_count properties.
        columns(impl Into<Cow<'a, str>>) => "columns";

        /// Inserts generated content.
        content(impl Into<Cow<'a, str>>) => "content";

        /// Increments one or more counter values.
        counter_increment(impl Into<Cow<'a, str>>) => "counter-increment";

        /// Creates or resets one or more counters.
        counter_reset(impl Into<Cow<'a, str>>) => "counter-reset";

        /// Specify the type of cursor.
        cursor(impl Into<Cow<'a, str>>) => "cursor";

        /// Define the text direction/writing direction.
        direction(impl Into<Cow<'a, str>>) => "direction";

        /// Specifies how an element is displayed onscreen.
        display(impl Into<Cow<'a, str>>) => "display";

        /// Show or hide borders and backgrounds of empty table cells.
        empty_cells(impl Into<Cow<'a, str>>) => "empty-cells";

        /// Specifies the components of a flexible length.
        flex(impl Into<Cow<'a, str>>) => "flex";

        /// Specifies the initial main size of the flex item.
        flex_basis(impl Into<Cow<'a, str>>) => "flex-basis";

        /// Specifies the direction of the flexible items.
        flex_direction(impl Into<Cow<'a, str>>) => "flex-direction";

        /// A shorthand property for the flex_direction and the flex_wrap properties.
        flex_flow(impl Into<Cow<'a, str>>) => "flex-flow";

        /// Specifies how the flex item will grow relative to the other items inside the flex container.
        flex_grow(impl Into<Cow<'a, str>>) => "flex-grow";

        /// Specifies how the flex item will shrink relative to the other items inside the flex container
        flex_shrink(impl Into<Cow<'a, str>>) => "flex-shrink";

        /// Specifies whether the flexible items should wrap or not.
        flex_wrap(impl Into<Cow<'a, str>>) => "flex-wrap";

        /// Specifies whether or not a box should float.
        float(impl Into<Cow<'a, str>>) => "float";

        /// Defines a variety of font properties within one declaration.
        font(impl Into<Cow<'a, str>>) => "font";

        /// Defines a list of fonts for element.
        font_family(impl Into<Cow<'a, str>>) => "font-family";

        /// Defines the font size for the text.
        font_size(impl Into<Cow<'a, str>>) => "font-size";

        /// Preserves the readability of text when font fallback occurs.
        font_size_adjust(impl Into<Cow<'a, str>>) => "font-size-adjust";

        /// Selects a normal, condensed, or expanded face from a font.
        font_stretch(impl Into<Cow<'a, str>>) => "font-stretch";

        /// Defines the font style for the text.
        font_style(impl Into<Cow<'a, str>>) => "font-style";

        /// Specify the font variant.
        font_variant(impl Into<Cow<'a, str>>) => "font-variant";

        /// Specify the font weight of the text.
        font_weight(impl Into<Cow<'a, str>>) => "font-weight";

        /// Sets gaps (gutters) between rows and columns. Shorthand for row_gap and column_gap.
        gap(impl Into<Cow<'a, str>>) => "gap";

        /// Specify the height of an element.
        height(impl Into<Cow<'a, str>>) => "height";

        /// Specifies how flex items are aligned along the main axis of the flex container after any flexible lengths and auto margins have been resolved.
        justify_content(impl Into<Cow<'a, str>>) => "justify-content";

        /// Specify the location of the left edge of the positioned element.
        left(impl Into<Cow<'a, str>>) => "left";

        /// Sets the extra spacing between letters.
        letter_spacing(impl Into<Cow<'a, str>>) => "letter-spacing";

        /// Sets the height between lines of text.
        line_height(impl Into<Cow<'a, str>>) => "line-height";

        /// Defines the display style for a list and list elements.
        list_style(impl Into<Cow<'a, str>>) => "list-style";

        /// Specifies the image to be used as a list_item marker.
        list_style_image(impl Into<Cow<'a, str>>) => "list-style-image";

        /// Specifies the position of the list_item marker.
        list_style_position(impl Into<Cow<'a, str>>) => "list-style-position";

        /// Specifies the marker style for a list_item.
        list_styler_type(impl Into<Cow<'a, str>>) => "list-style-type";

        /// Sets the margin on all four sides of the element.
        margin(impl Into<Cow<'a, str>>) => "margin";

        /// Sets the bottom margin of the element.
        margin_bottom(impl Into<Cow<'a, str>>) => "margin-bottom";

        /// Sets the left margin of the element.
        margin_left(impl Into<Cow<'a, str>>) => "margin-left";

        /// Sets the right margin of the element.
        margin_right(impl Into<Cow<'a, str>>) => "margin-right";

        /// Sets the top margin of the element.
        margin_top(impl Into<Cow<'a, str>>) => "margin-top";

        /// Specify the maximum height of an element.
        max_height(impl Into<Cow<'a, str>>) => "max-height";

        /// Specify the maximum width of an element.
        max_width(impl Into<Cow<'a, str>>) => "max-width";

        /// Specify the minimum height of an element.
        min_height(impl Into<Cow<'a, str>>) => "min-height";

        /// Specify the minimum width of an element.
        min_width(impl Into<Cow<'a, str>>) => "min-width";

        /// Specifies the transparency of an element.
        opacity(impl Into<Cow<'a, str>>) => "opacity";

        /// Specifies the order in which a flex items are displayed and laid out within a flex container.
        order(impl Into<Cow<'a, str>>) => "order";

        /// Sets the width, style, and color for all four sides of an element's outline.
        outline(impl Into<Cow<'a, str>>) => "outline";

        /// Sets the color of the outline.
        outline_color(impl Into<Cow<'a, str>>) => "outline-color";

        /// Set the space between an outline and the border edge of an element.
        outline_offset(impl Into<Cow<'a, str>>) => "outline-offset";

        /// Sets a style for an outline.
        outline_style(impl Into<Cow<'a, str>>) => "outline-style";

        /// Sets the width of the outline.
        outline_width(impl Into<Cow<'a, str>>) => "outline-width";

        /// Specifies the treatment of content that overflows the element's box.
        overflow(impl Into<Cow<'a, str>>) => "overflow";

        /// Specifies the treatment of content that overflows the element's box horizontally.
        overflow_x(impl Into<Cow<'a, str>>) => "overflow-x";

        /// Specifies the treatment of content that overflows the element's box vertically.
        overflow_y(impl Into<Cow<'a, str>>) => "overflow-y";

        /// Sets the padding on all four sides of the element.
        padding(impl Into<Cow<'a, str>>) => "padding";

        /// Sets the padding to the bottom side of an element.
        padding_bottom(impl Into<Cow<'a, str>>) => "padding-bottom";

        /// Sets the padding to the left side of an element.
        padding_left(impl Into<Cow<'a, str>>) => "padding-left";

        /// Sets the padding to the right side of an element.
        padding_right(impl Into<Cow<'a, str>>) => "padding-right";

        /// Sets the padding to the top side of an element.
        padding_top(impl Into<Cow<'a, str>>) => "padding-top";

        /// Insert a page breaks after an element.
        page_break_after(impl Into<Cow<'a, str>>) => "page-break-after";

        /// Insert a page breaks before an element.
        page_break_before(impl Into<Cow<'a, str>>) => "page-break-before";

        /// Insert a page breaks inside an element.
        page_break_inside(impl Into<Cow<'a, str>>) => "page-break-inside";

        /// Defines the perspective from which all child elements of the object are viewed.
        perspective(impl Into<Cow<'a, str>>) => "perspective";

        /// Defines the origin (the vanishing point for the 3D space) for the perspective property.
        perspective_origin(impl Into<Cow<'a, str>>) => "perspective-origin";

        /// Specifies how an element is positioned.
        position(impl Into<Cow<'a, str>>) => "position";

        /// The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can
        /// become the target of pointer events.
        ///
        /// MDN: [`pointer_events`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events)
        pointer_events(impl Into<Cow<'a, str>>) => "pointer-events";

        /// Specifies quotation marks for embedded quotations.
        quotes(impl Into<Cow<'a, str>>) => "quotes";

        /// Specifies whether or not an element is resizable by the user.
        resize(impl Into<Cow<'a, str>>) => "resize";

        /// Specify the location of the right edge of the positioned element.
        right(impl Into<Cow<'a, str>>) => "right";

        /// Specifies the gap between the rows in a multi_column element.
        row_gap(impl Into<Cow<'a, str>>) => "row-gap";

        /// Specifies the length of the tab character.
        tab_size(impl Into<Cow<'a, str>>) => "tab-size";

        /// Specifies a table layout algorithm.
        table_layout(impl Into<Cow<'a, str>>) => "table-layout";

        /// Sets the horizontal alignment of inline content.
        text_align(impl Into<Cow<'a, str>>) => "text-align";

        /// Specifies how the last line of a block or a line right before a forced line break is aligned when  is justify.",
        text_align_last(impl Into<Cow<'a, str>>) => "text-align-last";

        /// Specifies the decoration added to text.
        text_decoration(impl Into<Cow<'a, str>>) => "text-decoration";

        /// Specifies the color of the text_decoration_line.
        text_decoration_color(impl Into<Cow<'a, str>>) => "text-decoration-color";

        /// Specifies what kind of line decorations are added to the element.
        text_decoration_line(impl Into<Cow<'a, str>>) => "text-decoration-line";

        /// Specifies the style of the lines specified by the text_decoration_line property
        text_decoration_style(impl Into<Cow<'a, str>>) => "text-decoration-style";

        /// Indent the first line of text.
        text_indent(impl Into<Cow<'a, str>>) => "text-indent";

        /// Specifies the justification method to use when the text_align property is set to justify.
        text_justify(impl Into<Cow<'a, str>>) => "text-justify";

        /// Specifies how the text content will be displayed, when it overflows the block containers.
        text_overflow(impl Into<Cow<'a, str>>) => "text-overflow";

        /// Applies one or more shadows to the text content of an element.
        text_shadow(impl Into<Cow<'a, str>>) => "text-shadow";

        /// Transforms the case of the text.
        text_transform(impl Into<Cow<'a, str>>) => "text-transform";

        /// Specify the location of the top edge of the positioned element.
        top(impl Into<Cow<'a, str>>) => "top";

        /// Applies a 2D or 3D transformation to an element.
        transform(impl Into<Cow<'a, str>>) => "transform";

        /// Defines the origin of transformation for an element.
        transform_origin(impl Into<Cow<'a, str>>) => "transform-origin";

        /// Specifies how nested elements are rendered in 3D space.
        transform_style(impl Into<Cow<'a, str>>) => "transform-style";

        /// Defines the transition between two states of an element.
        transition(impl Into<Cow<'a, str>>) => "transition";

        /// Specifies when the transition effect will start.
        transition_delay(impl Into<Cow<'a, str>>) => "transition-delay";

        /// Specifies the number of seconds or milliseconds a transition effect should take to complete.
        transition_duration(impl Into<Cow<'a, str>>) => "transition-duration";

        /// Specifies the names of the CSS properties to which a transition effect should be applied.
        transition_property(impl Into<Cow<'a, str>>) => "transition-property";

        /// Specifies the speed curve of the transition effect.
        transition_timing_function(impl Into<Cow<'a, str>>) => "transition-timing-function";

        /// The user-select CSS property controls whether the user can select text.
        /// This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.
        user_select(impl Into<Cow<'a, str>>) => "user-select";

        webkit_user_select(impl Into<Cow<'a, str>>) => "-webkit-user-select";

        /// Sets the vertical positioning of an element relative to the current text baseline.
        vertical_align(impl Into<Cow<'a, str>>) => "vertical-align";

        /// Specifies whether or not an element is visible.
        visibility(impl Into<Cow<'a, str>>) => "visibility";

        /// Specifies how white space inside the element is handled.
        white_space(impl Into<Cow<'a, str>>) => "white-space";

        /// Specify the width of an element.
        width(impl Into<Cow<'a, str>>) => "width";

        /// Specifies how to break lines within words.
        word_break(impl Into<Cow<'a, str>>) => "word-break";

        /// Sets the spacing between words.
        word_spacing(impl Into<Cow<'a, str>>) => "word-spacing";

        /// Specifies whether to break words when the content overflows the boundaries of its container.
        word_wrap(impl Into<Cow<'a, str>>) => "word-wrap";

        /// Specifies a layering or stacking order for positioned elements.
        z_index(impl Into<Cow<'a, str>>) => "z-index";
    }

    // The Dioxus Synthetic event system
    // todo: move these into the html event system. dioxus accepts *any* event, so having these here doesn't make sense.
    events! {
        ClipboardEvent(ClipboardData): [
            /// Called when "copy"
            oncopy

            /// oncut
            oncut

            /// onpaste
            onpaste
        ];

        CompositionEvent(CompositionData): [
            /// oncompositionend
            oncompositionend

            /// oncompositionstart
            oncompositionstart

            /// oncompositionupdate
            oncompositionupdate
        ];

        KeyboardEvent(KeyboardData): [
            /// onkeydown
            onkeydown

            /// onkeypress
            onkeypress

            /// onkeyup
            onkeyup
        ];

        FocusEvent(FocusData): [
            /// onfocus
            onfocus

            // onfocusout
            onfocusout

            // onfocusin
            onfocusin

            /// onblur
            onblur
        ];

        FormEvent(FormData): [
            /// onchange
            onchange

            /// oninput handler
            oninput

            /// oninvalid
            oninvalid

            /// onreset
            onreset

            /// onsubmit
            onsubmit
        ];

        /// A synthetic event that wraps a web-style [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent)
        ///
        ///
        /// The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse).
        MouseEvent(MouseData): [
            /// Execute a callback when a button is clicked.
            ///
            /// ## Description
            ///
            /// An element receives a click event when a pointing device button (such as a mouse's primary mouse button)
            /// is both pressed and released while the pointer is located inside the element.
            ///
            /// - Bubbles: Yes
            /// - Cancelable: Yes
            /// - Interface(InteData): [`MouseEvent`]
            ///
            /// If the button is pressed on one element and the pointer is moved outside the element before the button
            /// is released, the event is fired on the most specific ancestor element that contained both elements.
            /// `click` fires after both the `mousedown` and `mouseup` events have fired, in that order.
            ///
            /// ## Example
            /// ```rust, ignore
            /// rsx!( button { "click me", onclick: move |_| log::info!("Clicked!`") } )
            /// ```
            ///
            /// ## Reference
            /// - <https://www.w3schools.com/tags/ev_onclick.asp>
            /// - <https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event>
            onclick

            /// oncontextmenu
            oncontextmenu

            /// ondoubleclick
            ondoubleclick

            /// ondoubleclick
            ondblclick

            /// ondrag
            ondrag

            /// ondragend
            ondragend

            /// ondragenter
            ondragenter

            /// ondragexit
            ondragexit

            /// ondragleave
            ondragleave

            /// ondragover
            ondragover

            /// ondragstart
            ondragstart

            /// ondrop
            ondrop

            /// onmousedown
            onmousedown

            /// onmouseenter
            onmouseenter

            /// onmouseleave
            onmouseleave

            /// onmousemove
            onmousemove

            /// onmouseout
            onmouseout

            ///
            onscroll

            /// onmouseover
            ///
            /// Triggered when the users's mouse hovers over an element.
            onmouseover

            /// onmouseup
            onmouseup
        ];

        PointerEvent(PointerData): [
            /// pointerdown
            onpointerdown

            /// pointermove
            onpointermove

            /// pointerup
            onpointerup

            /// pointercancel
            onpointercancel

            /// gotpointercapture
            ongotpointercapture

            /// lostpointercapture
            onlostpointercapture

            /// pointerenter
            onpointerenter

            /// pointerleave
            onpointerleave

            /// pointerover
            onpointerover

            /// pointerout
            onpointerout
        ];

        SelectionEvent(SelectionData): [
            /// onselect
            onselect
        ];

        TouchEvent(TouchData): [
            /// ontouchcancel
            ontouchcancel

            /// ontouchend
            ontouchend

            /// ontouchmove
            ontouchmove

            /// ontouchstart
            ontouchstart
        ];

        WheelEvent(WheelData): [
            ///
            onwheel
        ];

        MediaEvent(MediaData): [
            ///abort
            onabort

            ///canplay
            oncanplay

            ///canplaythrough
            oncanplaythrough

            ///durationchange
            ondurationchange

            ///emptied
            onemptied

            ///encrypted
            onencrypted

            ///ended
            onended

            ///error
            onerror

            ///loadeddata
            onloadeddata

            ///loadedmetadata
            onloadedmetadata

            ///loadstart
            onloadstart

            ///pause
            onpause

            ///play
            onplay

            ///playing
            onplaying

            ///progress
            onprogress

            ///ratechange
            onratechange

            ///seeked
            onseeked

            ///seeking
            onseeking

            ///stalled
            onstalled

            ///suspend
            onsuspend

            ///timeupdate
            ontimeupdate

            ///volumechange
            onvolumechange

            ///waiting
            onwaiting
        ];

        AnimationEvent(AnimationData): [
            /// onanimationstart
            onanimationstart

            /// onanimationend
            onanimationend

            /// onanimationiteration
            onanimationiteration
        ];

        TransitionEvent(TransitionData): [
            ///
            ontransitionend
        ];

        ToggleEvent(ToggleData): [
            ///
            ontoggle
        ];
    }
}
